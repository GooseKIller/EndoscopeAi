// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'endo_yolo.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

Future<YoloHandle> yoloNew({
  required String modelPath,
  required List<String> classLabels,
  required double confidenceThreshold,
  required double nmsThreshold,
}) => RustLib.instance.api.crateApiYoloFlutterYoloYoloNew(
  modelPath: modelPath,
  classLabels: classLabels,
  confidenceThreshold: confidenceThreshold,
  nmsThreshold: nmsThreshold,
);

Future<List<FFIDetectionResult>> yoloPredict({
  required YoloHandle yoloHandle,
  required int width,
  required int height,
  required List<int> pixels,
}) => RustLib.instance.api.crateApiYoloFlutterYoloYoloPredict(
  yoloHandle: yoloHandle,
  width: width,
  height: height,
  pixels: pixels,
);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<YoloHandle>>
abstract class YoloHandle implements RustOpaqueInterface {
  Yolo get field0;

  set field0(Yolo field0);
}

class FFIDetectionResult {
  final double x1;
  final double y1;
  final double x2;
  final double y2;
  final String label;
  final double confidence;

  const FFIDetectionResult({
    required this.x1,
    required this.y1,
    required this.x2,
    required this.y2,
    required this.label,
    required this.confidence,
  });

  @override
  int get hashCode =>
      x1.hashCode ^
      y1.hashCode ^
      x2.hashCode ^
      y2.hashCode ^
      label.hashCode ^
      confidence.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FFIDetectionResult &&
          runtimeType == other.runtimeType &&
          x1 == other.x1 &&
          y1 == other.y1 &&
          x2 == other.x2 &&
          y2 == other.y2 &&
          label == other.label &&
          confidence == other.confidence;
}
