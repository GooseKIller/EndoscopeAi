// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'api/yolo/endo_yolo.dart';
import 'api/yolo/flutter_yolo.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => 701535447;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Yolo crateApiYoloFlutterYoloYoloHandleAutoAccessorGetField0({
    required YoloHandle that,
  });

  void crateApiYoloFlutterYoloYoloHandleAutoAccessorSetField0({
    required YoloHandle that,
    required Yolo field0,
  });

  Future<(DynamicImage, (double, double), double)>
  crateApiYoloEndoYoloYoloLetterbox({
    required Yolo that,
    required DynamicImage image,
    required (int, int) targetSize,
  });

  Future<Yolo> crateApiYoloEndoYoloYoloNew({
    required String modelPath,
    required List<String> classLabels,
    required double confidenceThreshold,
    required double nmsThreshold,
  });

  Future<List<DetectionResult>> crateApiYoloEndoYoloYoloPredict({
    required Yolo that,
    required DynamicImage image,
  });

  Future<double> crateApiAdds({required double a, required double b});

  Future<double> crateApiYoloEndoYoloBoundingBoxIntersection({
    required BoundingBox that,
    required BoundingBox other,
  });

  Future<double> crateApiYoloEndoYoloBoundingBoxIou({
    required BoundingBox that,
    required BoundingBox other,
  });

  Future<BoundingBox> crateApiYoloEndoYoloBoundingBoxNew({
    required double x1,
    required double y1,
    required double x2,
    required double y2,
  });

  Future<double> crateApiYoloEndoYoloBoundingBoxUnion({
    required BoundingBox that,
    required BoundingBox other,
  });

  Future<YoloHandle> crateApiYoloFlutterYoloYoloNew({
    required String modelPath,
    required List<String> classLabels,
    required double confidenceThreshold,
    required double nmsThreshold,
  });

  Future<List<FFIDetectionResult>> crateApiYoloFlutterYoloYoloPredict({
    required YoloHandle yoloHandle,
    required int width,
    required int height,
    required List<int> pixels,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DynamicImage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DynamicImage;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DynamicImagePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Yolo;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Yolo;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_YoloPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_YoloHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_YoloHandle;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_YoloHandlePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Yolo crateApiYoloFlutterYoloYoloHandleAutoAccessorGetField0({
    required YoloHandle that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiYoloFlutterYoloYoloHandleAutoAccessorGetField0ConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiYoloFlutterYoloYoloHandleAutoAccessorGetField0ConstMeta =>
      const TaskConstMeta(
        debugName: "YoloHandle_auto_accessor_get_field0",
        argNames: ["that"],
      );

  @override
  void crateApiYoloFlutterYoloYoloHandleAutoAccessorSetField0({
    required YoloHandle that,
    required Yolo field0,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
            field0,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiYoloFlutterYoloYoloHandleAutoAccessorSetField0ConstMeta,
        argValues: [that, field0],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiYoloFlutterYoloYoloHandleAutoAccessorSetField0ConstMeta =>
      const TaskConstMeta(
        debugName: "YoloHandle_auto_accessor_set_field0",
        argNames: ["that", "field0"],
      );

  @override
  Future<(DynamicImage, (double, double), double)>
  crateApiYoloEndoYoloYoloLetterbox({
    required Yolo that,
    required DynamicImage image,
    required (int, int) targetSize,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
            image,
            serializer,
          );
          sse_encode_box_autoadd_record_u_32_u_32(targetSize, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dynamic_image_record_f_32_f_32_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiYoloEndoYoloYoloLetterboxConstMeta,
        argValues: [that, image, targetSize],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiYoloEndoYoloYoloLetterboxConstMeta =>
      const TaskConstMeta(
        debugName: "Yolo_letterbox",
        argNames: ["that", "image", "targetSize"],
      );

  @override
  Future<Yolo> crateApiYoloEndoYoloYoloNew({
    required String modelPath,
    required List<String> classLabels,
    required double confidenceThreshold,
    required double nmsThreshold,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(modelPath, serializer);
          sse_encode_list_String(classLabels, serializer);
          sse_encode_f_32(confidenceThreshold, serializer);
          sse_encode_f_32(nmsThreshold, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiYoloEndoYoloYoloNewConstMeta,
        argValues: [modelPath, classLabels, confidenceThreshold, nmsThreshold],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiYoloEndoYoloYoloNewConstMeta =>
      const TaskConstMeta(
        debugName: "Yolo_new",
        argNames: [
          "modelPath",
          "classLabels",
          "confidenceThreshold",
          "nmsThreshold",
        ],
      );

  @override
  Future<List<DetectionResult>> crateApiYoloEndoYoloYoloPredict({
    required Yolo that,
    required DynamicImage image,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
            image,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_detection_result,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiYoloEndoYoloYoloPredictConstMeta,
        argValues: [that, image],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiYoloEndoYoloYoloPredictConstMeta =>
      const TaskConstMeta(
        debugName: "Yolo_predict",
        argNames: ["that", "image"],
      );

  @override
  Future<double> crateApiAdds({required double a, required double b}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_f_32(a, serializer);
          sse_encode_f_32(b, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAddsConstMeta,
        argValues: [a, b],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAddsConstMeta =>
      const TaskConstMeta(debugName: "adds", argNames: ["a", "b"]);

  @override
  Future<double> crateApiYoloEndoYoloBoundingBoxIntersection({
    required BoundingBox that,
    required BoundingBox other,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          sse_encode_box_autoadd_bounding_box(other, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiYoloEndoYoloBoundingBoxIntersectionConstMeta,
        argValues: [that, other],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiYoloEndoYoloBoundingBoxIntersectionConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_intersection",
        argNames: ["that", "other"],
      );

  @override
  Future<double> crateApiYoloEndoYoloBoundingBoxIou({
    required BoundingBox that,
    required BoundingBox other,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          sse_encode_box_autoadd_bounding_box(other, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiYoloEndoYoloBoundingBoxIouConstMeta,
        argValues: [that, other],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiYoloEndoYoloBoundingBoxIouConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_iou",
        argNames: ["that", "other"],
      );

  @override
  Future<BoundingBox> crateApiYoloEndoYoloBoundingBoxNew({
    required double x1,
    required double y1,
    required double x2,
    required double y2,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_f_32(x1, serializer);
          sse_encode_f_32(y1, serializer);
          sse_encode_f_32(x2, serializer);
          sse_encode_f_32(y2, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bounding_box,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiYoloEndoYoloBoundingBoxNewConstMeta,
        argValues: [x1, y1, x2, y2],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiYoloEndoYoloBoundingBoxNewConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_new",
        argNames: ["x1", "y1", "x2", "y2"],
      );

  @override
  Future<double> crateApiYoloEndoYoloBoundingBoxUnion({
    required BoundingBox that,
    required BoundingBox other,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          sse_encode_box_autoadd_bounding_box(other, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiYoloEndoYoloBoundingBoxUnionConstMeta,
        argValues: [that, other],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiYoloEndoYoloBoundingBoxUnionConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_union",
        argNames: ["that", "other"],
      );

  @override
  Future<YoloHandle> crateApiYoloFlutterYoloYoloNew({
    required String modelPath,
    required List<String> classLabels,
    required double confidenceThreshold,
    required double nmsThreshold,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(modelPath, serializer);
          sse_encode_list_String(classLabels, serializer);
          sse_encode_f_32(confidenceThreshold, serializer);
          sse_encode_f_32(nmsThreshold, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiYoloFlutterYoloYoloNewConstMeta,
        argValues: [modelPath, classLabels, confidenceThreshold, nmsThreshold],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiYoloFlutterYoloYoloNewConstMeta =>
      const TaskConstMeta(
        debugName: "yolo_new",
        argNames: [
          "modelPath",
          "classLabels",
          "confidenceThreshold",
          "nmsThreshold",
        ],
      );

  @override
  Future<List<FFIDetectionResult>> crateApiYoloFlutterYoloYoloPredict({
    required YoloHandle yoloHandle,
    required int width,
    required int height,
    required List<int> pixels,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
            yoloHandle,
            serializer,
          );
          sse_encode_u_32(width, serializer);
          sse_encode_u_32(height, serializer);
          sse_encode_list_prim_u_8_loose(pixels, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_ffi_detection_result,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiYoloFlutterYoloYoloPredictConstMeta,
        argValues: [yoloHandle, width, height, pixels],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiYoloFlutterYoloYoloPredictConstMeta =>
      const TaskConstMeta(
        debugName: "yolo_predict",
        argNames: ["yoloHandle", "width", "height", "pixels"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_DynamicImage => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_DynamicImage => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Yolo => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Yolo => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_YoloHandle => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_YoloHandle => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  DynamicImage
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DynamicImageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Yolo
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  YoloHandle
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Yolo
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  YoloHandle
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DynamicImage
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DynamicImageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Yolo
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  YoloHandle
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DynamicImage
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DynamicImageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Yolo
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  YoloHandle
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BoundingBox dco_decode_bounding_box(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BoundingBox(
      x1: dco_decode_f_32(arr[0]),
      y1: dco_decode_f_32(arr[1]),
      x2: dco_decode_f_32(arr[2]),
      y2: dco_decode_f_32(arr[3]),
    );
  }

  @protected
  BoundingBox dco_decode_box_autoadd_bounding_box(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bounding_box(raw);
  }

  @protected
  (int, int) dco_decode_box_autoadd_record_u_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (int, int);
  }

  @protected
  DetectionResult dco_decode_detection_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DetectionResult(
      bbox: dco_decode_bounding_box(arr[0]),
      label: dco_decode_String(arr[1]),
      confidence: dco_decode_f_32(arr[2]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FFIDetectionResult dco_decode_ffi_detection_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FFIDetectionResult(
      x1: dco_decode_f_32(arr[0]),
      y1: dco_decode_f_32(arr[1]),
      x2: dco_decode_f_32(arr[2]),
      y2: dco_decode_f_32(arr[3]),
      label: dco_decode_String(arr[4]),
      confidence: dco_decode_f_32(arr[5]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<DetectionResult> dco_decode_list_detection_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_detection_result).toList();
  }

  @protected
  List<FFIDetectionResult> dco_decode_list_ffi_detection_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ffi_detection_result).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  (DynamicImage, (double, double), double)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dynamic_image_record_f_32_f_32_f_32(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
        arr[0],
      ),
      dco_decode_record_f_32_f_32(arr[1]),
      dco_decode_f_32(arr[2]),
    );
  }

  @protected
  (double, double) dco_decode_record_f_32_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_f_32(arr[0]), dco_decode_f_32(arr[1]));
  }

  @protected
  (int, int) dco_decode_record_u_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_u_32(arr[0]), dco_decode_u_32(arr[1]));
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  DynamicImage
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DynamicImageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Yolo
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  YoloHandle
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Yolo
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  YoloHandle
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DynamicImage
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DynamicImageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Yolo
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  YoloHandle
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DynamicImage
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DynamicImageImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Yolo
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  YoloHandle
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloHandleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BoundingBox sse_decode_bounding_box(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x1 = sse_decode_f_32(deserializer);
    var var_y1 = sse_decode_f_32(deserializer);
    var var_x2 = sse_decode_f_32(deserializer);
    var var_y2 = sse_decode_f_32(deserializer);
    return BoundingBox(x1: var_x1, y1: var_y1, x2: var_x2, y2: var_y2);
  }

  @protected
  BoundingBox sse_decode_box_autoadd_bounding_box(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bounding_box(deserializer));
  }

  @protected
  (int, int) sse_decode_box_autoadd_record_u_32_u_32(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_u_32_u_32(deserializer));
  }

  @protected
  DetectionResult sse_decode_detection_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bbox = sse_decode_bounding_box(deserializer);
    var var_label = sse_decode_String(deserializer);
    var var_confidence = sse_decode_f_32(deserializer);
    return DetectionResult(
      bbox: var_bbox,
      label: var_label,
      confidence: var_confidence,
    );
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  FFIDetectionResult sse_decode_ffi_detection_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x1 = sse_decode_f_32(deserializer);
    var var_y1 = sse_decode_f_32(deserializer);
    var var_x2 = sse_decode_f_32(deserializer);
    var var_y2 = sse_decode_f_32(deserializer);
    var var_label = sse_decode_String(deserializer);
    var var_confidence = sse_decode_f_32(deserializer);
    return FFIDetectionResult(
      x1: var_x1,
      y1: var_y1,
      x2: var_x2,
      y2: var_y2,
      label: var_label,
      confidence: var_confidence,
    );
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<DetectionResult> sse_decode_list_detection_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DetectionResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_detection_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<FFIDetectionResult> sse_decode_list_ffi_detection_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FFIDetectionResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ffi_detection_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  (DynamicImage, (double, double), double)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dynamic_image_record_f_32_f_32_f_32(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
          deserializer,
        );
    var var_field1 = sse_decode_record_f_32_f_32(deserializer);
    var var_field2 = sse_decode_f_32(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (double, double) sse_decode_record_f_32_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_f_32(deserializer);
    var var_field1 = sse_decode_f_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_u_32_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_32(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
    DynamicImage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DynamicImageImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    Yolo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    YoloHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloHandleImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    Yolo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    YoloHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloHandleImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
    DynamicImage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DynamicImageImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    Yolo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    YoloHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloHandleImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
    DynamicImage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DynamicImageImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYOLO(
    Yolo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloHandle(
    YoloHandle self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloHandleImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bounding_box(BoundingBox self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x1, serializer);
    sse_encode_f_32(self.y1, serializer);
    sse_encode_f_32(self.x2, serializer);
    sse_encode_f_32(self.y2, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bounding_box(
    BoundingBox self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bounding_box(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_record_u_32_u_32(
    (int, int) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_u_32_u_32(self, serializer);
  }

  @protected
  void sse_encode_detection_result(
    DetectionResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bounding_box(self.bbox, serializer);
    sse_encode_String(self.label, serializer);
    sse_encode_f_32(self.confidence, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_ffi_detection_result(
    FFIDetectionResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x1, serializer);
    sse_encode_f_32(self.y1, serializer);
    sse_encode_f_32(self.x2, serializer);
    sse_encode_f_32(self.y2, serializer);
    sse_encode_String(self.label, serializer);
    sse_encode_f_32(self.confidence, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_detection_result(
    List<DetectionResult> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_detection_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ffi_detection_result(
    List<FFIDetectionResult> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ffi_detection_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_dynamic_image_record_f_32_f_32_f_32(
    (DynamicImage, (double, double), double) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicImage(
      self.$1,
      serializer,
    );
    sse_encode_record_f_32_f_32(self.$2, serializer);
    sse_encode_f_32(self.$3, serializer);
  }

  @protected
  void sse_encode_record_f_32_f_32(
    (double, double) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.$1, serializer);
    sse_encode_f_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_32_u_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.$1, serializer);
    sse_encode_u_32(self.$2, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class DynamicImageImpl extends RustOpaque implements DynamicImage {
  // Not to be used by end users
  DynamicImageImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DynamicImageImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DynamicImage,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DynamicImage,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DynamicImagePtr,
  );
}

@sealed
class YoloHandleImpl extends RustOpaque implements YoloHandle {
  // Not to be used by end users
  YoloHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  YoloHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_YoloHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_YoloHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_YoloHandlePtr,
  );

  Yolo get field0 => RustLib.instance.api
      .crateApiYoloFlutterYoloYoloHandleAutoAccessorGetField0(that: this);

  set field0(Yolo field0) => RustLib.instance.api
      .crateApiYoloFlutterYoloYoloHandleAutoAccessorSetField0(
        that: this,
        field0: field0,
      );
}

@sealed
class YoloImpl extends RustOpaque implements Yolo {
  // Not to be used by end users
  YoloImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  YoloImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Yolo,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Yolo,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_YoloPtr,
  );

  /// Изменяет размер изображения с сохранением соотношения сторон и добавляет padding
  ///
  /// Возвращает обработанное изображение, отступы по X/Y и коэффициент масштабирования
  Future<(DynamicImage, (double, double), double)> letterbox({
    required DynamicImage image,
    required (int, int) targetSize,
  }) => RustLib.instance.api.crateApiYoloEndoYoloYoloLetterbox(
    that: this,
    image: image,
    targetSize: targetSize,
  );

  /// Выполняет предсказание объектов на изображении.
  ///
  /// # Аргументы
  ///
  /// * `img` — изображение (`DynamicImage`), на котором будет выполнено предсказание.
  ///
  /// # Возвращает
  ///
  /// `Result<Vec<Detection>>` — список предсказанных объектов (`label`, `confidence`, `bbox`).
  ///
  /// # Ошибки
  ///
  /// Возвращает ошибку, если входное изображение не может быть преобразовано к формату,
  /// подходящему для модели, либо если инференс не удался.
  ///
  /// # Пример
  /// ```rust
  /// let img = image::open("example.jpg")?;
  /// let detections = yolo.predict(&img)?;
  /// for det in detections {
  ///     println!("{}: {:.2}, {:?}", det.label, det.confidence, det.bbox);
  /// }
  /// ```
  Future<List<DetectionResult>> predict({required DynamicImage image}) =>
      RustLib.instance.api.crateApiYoloEndoYoloYoloPredict(
        that: this,
        image: image,
      );
}
